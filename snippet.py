# test connection
import boto3
import logging
import json
from dotenv import load_dotenv
import os

# config for connecting to bucket
load_dotenv() 
BUCKET_ACCESS_KEY = os.getenv('BUCKET_ACCESS_KEY')
BUCKET_SECRET_KEY = os.getenv('BUCKET_SECRET_KEY')
BUCKET_NAME = os.getenv('BUCKET_NAME')
ENDPOINT_URL = os.getenv('ENDPOINT_URL')

def get_bucket():
    """
        Connect to Linode object storage and create the Bucket to download files 

        Return - Boto3 resource with the given BUCKET_NAME, if it exists. 
    """
    # Create resource
    # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3/service-resource/index.html
    print("testing if bucket connection successful...")
    try:
        s3 = boto3.resource(
            's3', aws_access_key_id=BUCKET_ACCESS_KEY, aws_secret_access_key=BUCKET_SECRET_KEY,
            endpoint_url=ENDPOINT_URL
        )
        bucket = s3.Bucket(BUCKET_NAME)
        print(f"Connection to bucket {str(bucket)} successful!")
        return bucket
    except Exception as e:
        print(f'Error connecting to Linode: {e}')

def generate_prefixes():
    """
        Generates the filename prefixes to retrive via key from Linode object storage.\n
        Prefixes follow this naming convention:\n
        'YYYY/MM/DD/unifi_api_endpoint_name'\n
        e.g: The prefix for '2024/09/19/count_alarms--2024-09-19--04-18-24.json' would be 
        '2024/09/19/count_alarms'

        Return - A list of filename prefixes that will be downloaded from object storage 
    """
    # 2024/09/19/count_alarms--2024-09-19--04-18-24.json
    # YYYY/MM/DD/list_devices
    prefixes = []
    for i in range(32):
        if i <= 9:
            i = '0' + str(i)
        prefix_string = f'2024/10/{i}/list_devices'
        prefixes.append(prefix_string)
    return prefixes

def download(prefixes):
    """
        Download files from object storage
    
        Arguments: 
        - prefixes: A list of key prefixes; generated by generate_prefixes()
    """
    # Generate keys to download based off of prefixes 
    for prefix in prefixes:
        for obj in bucket.objects.filter(Prefix=prefix):
            # just use the fname as the key instead of including date
            fname_no_prefix = f'{str(obj.key).split('/')[-1]}'
            # args - object key in remote, local filename/path
            bucket.download_file(str(obj.key), fname_no_prefix)

bucket = get_bucket()
prefixes = generate_prefixes()
download(prefixes=prefixes)

